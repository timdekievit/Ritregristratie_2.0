{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/stores/rideStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/Homepage.tsx","features/rides/dashboard/RideFilters.tsx","features/rides/dashboard/RideItemPlaceholder.tsx","features/rides/dashboard/RideListItem.tsx","features/rides/dashboard/RideList.tsx","app/models/ride.ts","features/rides/dashboard/RideDashboard.tsx","features/rides/details/RideDetailedHeader.tsx","features/map/Map.tsx","app/layout/LoadingComponent.tsx","features/rides/details/RideDetails.tsx","app/common/form/MyDateInput.tsx","features/rides/form/RideForm.tsx","features/errors/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Rides","list","params","details","id","create","ride","update","Account","current","login","user","register","GoogleMaps","apiKey","RideStore","ridesRegistry","Map","selectedRide","undefined","pagingParams","orderByRecent","predicate","set","loading","loadingInititial","setPagingParams","setPredicate","loadApiKey","setLoadingInitial","state","loadRides","axiosParams","result","forEach","setRide","setPagination","loadRide","getRide","runInAction","getDistance","service","google","maps","DistanceMatrixService","getDistanceMatrix","origins","beginAddress","destinations","destination","travelMode","TravelMode","DRIVING","unitSystem","UnitSystem","METRIC","date","Date","createRide","updateRide","clearSelectedRide","deleteRide","makeAutoObservable","reaction","clear","URLSearchParams","append","toString","value","Array","from","values","sort","b","getTime","Object","entries","ridesByDate","reduce","rides","format","UserStore","creds","setToken","modalStore","closeModal","logout","rideStore","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","userStore","modal","open","openModal","content","StoreContext","createContext","useStore","useContext","NavBar","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","Icon","name","size","Button","positive","position","Image","src","image","avatar","spaced","Dropdown","pointing","text","displayName","onClick","icon","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","observer","initialValues","email","password","onSubmit","setErrors","catch","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","style","marginBottom","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","username","isValid","dirty","disabled","Segment","vertical","isLoggedIn","Link","widht","marginTop","attached","active","RideItemPlaceholder","Placeholder","Group","minHeight","Line","clearing","floated","RideListItem","Content","groupedRides","group","sub","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","width","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","distance","setDistance","googleMapsApiKey","options","callback","km","rows","elements","profile","containerStyle","height","center","lat","lng","directions","setDirections","mapContainerStyle","zoom","origin","LoadingComponent","Dimmer","useParams","MyDateInput","helpers","selected","onChange","setValue","useHistory","nullable","enableReinitialize","length","newRide","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","dateFormat","NotFound","Inline","primary","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","RideDashboard","RideDetails","RideForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e24abc8b.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 5) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { Ride } from '../models/ride';\nimport { history } from '../..';\nimport { store } from '../stores/store';\nimport { User, UserFormValues } from '../models/user';\nimport { PaginatedResult } from '../models/pagination';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay);\n    });\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n});\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n\n}, (error: AxiosError) => {\nconst {data, status, config} = error.response!;\nconsole.log(error.response);\nswitch (status) {\n    case 400:\n        if (typeof data === 'string') {\n            toast.error(data);\n        }\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n            history.push('/not-found');\n        }\n        if (data.errors) {\n            const modalStateErrors = [];\n            for (const key in data.errors) {\n                if (data.errors[key]) {\n                    modalStateErrors.push(data.errors[key])\n                }\n            }\n            throw modalStateErrors.flat();\n        }\n        break;\n    case 401:\n        toast.error('unauthorised');\n        break;\n    case 404:\n        history.push('/not-found')\n        break; \n    case 500:\n        store.commonStore.setServerError(data);\n        history.push('/server-error');\n        break;           \n}\nreturn Promise.reject(error);\n});\n\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst request = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody), \n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody), \n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody), \n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody), \n}\n\nconst Rides = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Ride[]>>('/rides', { params })\n        .then(responseBody),\n    details: (id: string) => request.get<Ride>(`rides/${id}`),\n    create: (ride: Ride) => request.post<void>('/rides', ride), \n    update: (ride: Ride) => request.put<void>(`/rides/${ride.id}`, ride),\n    delete: (id: string) => request.del<void>(`rides/${id}`)\n}\n\nconst Account = {\n    current: () => request.get<User>('/account'),\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\n}\n\nconst GoogleMaps = {\n    apiKey: () => request.get<string>('/googleMaps')\n}\n\nconst agent = {\n    Rides,\n    Account,\n    GoogleMaps\n}\n\nexport default agent;","import { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Ride } from \"../models/ride\";\n\nexport default class RideStore {\n    ridesRegistry = new Map<string, Ride>();\n    selectedRide: Ride | undefined = undefined;\n    apiKey: string = '';\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    orderByRecent = true;\n    predicate = new Map().set('orderByRecent', true);\n    loading = false;\n    loadingInititial = true;\n\n    constructor() {\n        makeAutoObservable(this)\n        this.loadApiKey();\n\n        reaction(\n            () => this.orderByRecent,\n            () => {\n                this.pagingParams = new PagingParams();\n                this.ridesRegistry.clear();\n                this.loadRides();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string) => {\n        switch (predicate) {\n            case 'orderByRecent':\n                this.predicate.set('orderByRecent', true);\n                this.orderByRecent = true;\n                break;\n            case 'orderByOld':\n                this.predicate.set('orderByRecent', false);\n                this.orderByRecent = false;\n                break;     \n                \n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            params.append(key, value);\n        })\n        return params;\n    }\n\n    get ridesByDate() {\n        if(this.orderByRecent) {\n            return Array.from(this.ridesRegistry.values()).sort((a, b) => \n            b.date!.getTime() - a.date!.getTime());\n        }\n        else {\n            return Array.from(this.ridesRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n        }\n\n    }\n\n    get groupedRides() {\n        return Object.entries(\n            this.ridesByDate.reduce((rides, ride) => {\n                const date = format(ride.date!, 'dd MMM yyyy')\n                rides[date] = rides[date] ? [...rides[date], ride] : [ride];\n                return rides;\n            }, {} as {[key: string]: Ride[]})\n        )\n    }\n\n    loadApiKey = async () => {\n        try {\n            this.apiKey = await agent.GoogleMaps.apiKey();\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInititial = state;\n    }\n\n    loadRides = async () => {\n        this.loadingInititial = true;\n        try {\n            const result = await agent.Rides.list(this.axiosParams);\n            result.data.forEach(ride => {\n                this.setRide(ride);\n            });\n            this.setPagination(result.pagination)\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadRide = async (id: string) => {\n        let ride = this.getRide(id);\n        if (ride) {\n            this.selectedRide = ride;\n            return ride;\n        } else {\n            this.loadingInititial = true;\n            try {\n                ride = await agent.Rides.details(id);\n                this.setRide(ride);\n                runInAction(() => {\n                    this.selectedRide= ride;\n                })\n                this.setLoadingInitial(false);\n                return ride;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    getDistance = async (ride: Ride) => {\n        var service = new google.maps.DistanceMatrixService();\n        service.getDistanceMatrix({\n            origins: [ride.beginAddress],\n            destinations: [ride.destination],\n            travelMode: google.maps.TravelMode.DRIVING,\n            unitSystem: google.maps.UnitSystem.METRIC\n        });\n        console.log(service);\n    }\n\n    private setRide= (ride: Ride) => {\n        ride.date = new Date(ride.date!)\n        this.ridesRegistry.set(ride.id, ride);\n    }\n\n    private getRide = (id: string) => {\n        return this.ridesRegistry.get(id);\n    }\n\n\n    createRide = async (ride: Ride) => {\n        try {\n            await agent.Rides.create(ride);\n            runInAction(() => {\n                this.ridesRegistry.set(ride.id, ride);\n                this.selectedRide = ride;\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateRide = async (ride: Ride) => {\n        this.loading = true;\n        try {\n            await agent.Rides.update(ride);\n            runInAction(() => {\n                this.ridesRegistry.set(ride.id, ride);\n                this.selectedRide = ride;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    }\n\n    clearSelectedRide = () => {\n        this.selectedRide = undefined;\n    }\n\n    deleteRide = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Rides.delete(id);\n            runInAction(() => {\n                this.ridesRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/rides');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        store.rideStore.ridesRegistry.clear();\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/rides');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n}"," import { createContext, useContext } from \"react\"\nimport CommonStore from \"./commonStore\";\nimport RideStore from \"./rideStore\"\nimport ModalStore from \"./modalStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    rideStore: RideStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n}\n\nexport const store: Store = {\n    rideStore: new RideStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/ServerError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal ={\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown, Icon } from 'semantic-ui-react'\nimport { useStore } from '../stores/store';\n\nexport default function NavBar() {\n\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <Icon name='car' size='big'/>\n                    RideRegistration\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/rides' name='Rides'/>\n                <Menu.Item>\n                    <Button as={NavLink} to='/CreateRide' positive content='Create Ride'/>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n}"," import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header, Label } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to RideRegistration' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage  \n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n});","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>\n                            {err}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport ValidationErrors from '../errors/ValidationErrors'\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Register to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage  \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n});","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Icon, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead' >\n            <Container text>\n                <Header as='h1' inverted >\n                    {/* <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} /> */}\n                    <Icon size='massive' name='car' />\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to RideRegistration' />\n                        <Button as={Link} to='/rides' size='huge' inverted>\n                            Go to Rides!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n\n\n            </Container>\n        </Segment>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Menu, Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function RideFilters() {\n    const {rideStore: {setPredicate, orderByRecent}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ widht: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='recent rides first'\n                    active={orderByRecent === true}\n                    onClick={() => {\n                        setPredicate('orderByRecent')\n                    }} \n                />\n                <Menu.Item \n                    content=\"oldest rides first\"\n                    active={orderByRecent === false}\n                    onClick={() => setPredicate('orderByOld')}  \n                />\n            </Menu>\n            <Header />\n            {/* <Calendar \n                onChange={(date: any) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            /> */}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function RideItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 15 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 50 }}>\n                        <Placeholder>\n                            <Placeholder.Header>\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                        </Placeholder>\n                    </Segment>\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};"," import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { format } from \"date-fns\";\nimport { Button, Icon, Item,  Segment } from 'semantic-ui-react';\nimport { Ride } from '../../../app/models/ride';\n\ninterface Props {\n    ride: Ride\n}\n\nexport default function RideListItem({ride}: Props) {\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/rides/${ride.id}`}>\n                                <span> \n                                    <Icon name='road'></Icon> ride from {ride.beginAddress} to {ride.destination}\n                                </span>\n                            </Item.Header>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment clearing>\n                <span>\n                    <Icon name='clock' /> {format(ride.date!, 'dd MMM yyyy')}\n                    {/* <Icon name='marker'/> {ride.venue} */}\n                </span>\n                <Button\n                    as={Link}\n                    to={`/rides/${ride.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport RideListItem from './RideListItem';\n\n\nexport default observer(function RideList() {\n    const { rideStore } = useStore();\n    const { groupedRides } = rideStore;\n\n    return (\n        <>\n            {groupedRides.map(([group, rides]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n\n                    </Header>\n                    {rides.map(ride => (\n                        <RideListItem key={ride.id} ride={ride} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n});","export interface Ride {\n    id: string;\n    beginAddress: string;\n    destination: string;\n    date: Date | null;\n    profile: Profile | null;\n}\n\nexport interface Profile {\n    userName: string;\n    displayName: string\n}\n\nexport enum TravelMode {\n    BICYCLING = 'BICYCLING',\n    DRIVING = 'DRIVING',\n    TRANSIT = 'TRANSIT',\n    WALKING = 'WALKING',\n  }\n\nexport enum UnitSystem {\n    IMPERIAL = 0.0,\n    METRIC = 1.0,\n  }  ","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport RideFilters from './RideFilters';\nimport RideItemPlaceholder from './RideItemPlaceholder';\nimport RideList from './RideList';\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\n\n\nexport default observer(function RideDashboard() {\n    const { rideStore } = useStore();\n    const {loadRides, ridesRegistry, setPagingParams, pagination} = rideStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadRides().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (ridesRegistry.size <= 1) loadRides();\n    }, [ridesRegistry.size, loadRides])\n  \n    return (\n        <Grid>\n            <Grid.Column width='10'>\n            {rideStore.loadingInititial && !loadingNext ? (\n                    <>\n                        <RideItemPlaceholder />\n                        <RideItemPlaceholder />\n                        <RideItemPlaceholder />\n                        <RideItemPlaceholder />\n                        <RideItemPlaceholder />\n                    </>\n                ) : <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && !!pagination &&\n                    pagination.currentPage < pagination.totalPages}\n                initialLoad={false}\n            >\n                <RideList />\n        </InfiniteScroll>}\n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n                <RideFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n});","/* eslint-disable no-undef */\nimport { DistanceMatrixService, LoadScript } from '@react-google-maps/api';\nimport { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment } from 'semantic-ui-react'\nimport { Ride, TravelMode, UnitSystem } from '../../../app/models/ride';\nimport { useStore } from '../../../app/stores/store';\n\ninterface Props {\n    ride: Ride\n}\n\n\n\nexport default observer(function RideDetailedHeader({ ride }: Props) {\n    let [distance, setDistance] = useState<any>();\n    const {rideStore} = useStore();\n\n    const distanceCallback = (response: any) => {\n        var km = response.rows[0].elements[0].distance.value / 1000\n        setDistance(km);\n    }\n\n    return (\n        <>\n            <LoadScript\n                googleMapsApiKey={rideStore.apiKey}\n            >\n                {distance === undefined &&\n                (<DistanceMatrixService\n                    options={{\n                        origins: [ride.beginAddress],\n                        destinations: [ride.destination],\n                        travelMode: TravelMode.DRIVING,\n                        unitSystem: UnitSystem.METRIC\n                    }}\n                    callback={distanceCallback}\n                />)}\n            </LoadScript>\n            <Segment.Group>\n                <Segment clearing>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={`ride from ${ride.beginAddress} to ${ride.destination}`}\n                                />\n                                <p>{format(ride.date!, 'dd MMM yyyy h:mm aa')}</p>\n                                <p>\n                                    ride by <strong>{ride.profile?.displayName}</strong>\n                                </p>\n\n                                {distance !== undefined && (\n                                    <p>distance: {distance} km</p>\n                                )}\n\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                    <Button as={Link} to={`/manage/${ride.id}`} color='orange' floated='right'>\n                        Edit Ride\n                    </Button>\n                </Segment>\n            </Segment.Group>\n        </>\n    )\n})","import React, { useState } from 'react'\nimport { GoogleMap, LoadScript, DirectionsRenderer, DirectionsService } from '@react-google-maps/api';\nimport { Ride, TravelMode } from '../../app/models/ride';\nimport { useStore } from '../../app/stores/store';\nimport { Segment } from 'semantic-ui-react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\n\nconst center = {\n  lat: 52.23,\n  lng: 4.55\n};\n\ninterface Props {\n  ride: Ride\n}\n\n\nexport default function Map({ ride }: Props) {\n  let [directions, setDirections] = useState();\n  const { rideStore } = useStore();\n\n\n  const directionsCallback = (response: any) => {\n    if (response !== null) {\n      if (response.status === 'OK' && directions === undefined) {\n        setDirections(response);\n      } else {\n        console.log('response: ', response)\n      }\n    }\n  }\n\n  return (\n    <Segment>\n      <LoadScript\n        googleMapsApiKey={rideStore.apiKey}\n      >\n        <GoogleMap\n          mapContainerStyle={containerStyle}\n          center={center}\n          zoom={10}\n        >\n\n          {\n            ride.destination !== '' &&\n            ride.beginAddress !== '' &&\n            directions === undefined &&\n            (\n              <DirectionsService\n                options={{\n                  destination: ride.destination,\n                  origin: ride.beginAddress,\n                  travelMode: TravelMode.DRIVING\n                }}\n                callback={directionsCallback}\n              />\n            )\n          }\n\n          {\n            directions !== undefined &&\n            (\n              <DirectionsRenderer\n                options={{\n                  directions: directions\n                }}\n              />\n            )\n          }\n          <></>\n        </GoogleMap>\n      </LoadScript>\n    </Segment>\n\n  )\n}\n\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport RideDetailedHeader from './RideDetailedHeader';\nimport Map from '../../map/Map'\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\nexport default observer(function RideDetails(){\n    const {rideStore} = useStore();\n    const {selectedRide: ride, loadRide, loadingInititial, clearSelectedRide} = rideStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadRide(id);\n        return () => clearSelectedRide();\n    },[id, loadRide, clearSelectedRide]);\n\n    if (loadingInititial || !ride) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                <RideDetailedHeader ride={ride!} />\n                <Map ride={ride!} />\n            </Grid.Column>\n        </Grid>\n    );\n});","import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps<any>>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport React, { useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { Ride } from '../../../app/models/ride';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n\n\nexport default observer(function RideForm() {\n\n    const history = useHistory();\n    const { rideStore } = useStore();\n    const { createRide, updateRide, loadRide, loadingInititial } = rideStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [ride, setRide] = useState<Ride>({\n        id: '',\n        beginAddress: '',\n        destination: '',\n        date: null,\n        profile: null\n    });\n\n    const validationSchema = Yup.object({\n        beginAddress: Yup.string().required('The beginAddress is required'),\n        destination: Yup.string().required('The destination is required'),\n        date: Yup.string().required('Date is required').nullable()\n    });\n\n    useEffect(() => {\n        if (id) loadRide(id).then(ride => setRide(ride!))\n    }, [id, loadRide]);\n\n    function handleFormSubmit(ride: Ride) {\n        if (ride.id.length === 0) {\n            let newRide = {\n                ...ride,\n                id: uuid()\n            }\n            createRide(newRide).then(() => history.push(`/rides/${newRide.id}`))\n        } else {\n            updateRide(ride).then(() => history.push(`/rides/${ride.id}`))\n        }\n\n    }\n\n    if (loadingInititial) return <LoadingComponent content='loading ride...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Ride Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize initialValues={ride}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='beginAddress' placeholder='BeginAddress' />\n                        <MyTextInput placeholder='Destination' name='destination' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Button\n                            disabled={ isSubmitting || !dirty || !isValid}\n                            floated='right' positive\n                            loading={isSubmitting} \n                            type='submit'\n                            content='Submit'\n                        />\n                        <Button as={Link} to='/rides' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n});","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/rides' primary>\n                    Return to my rides\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/Homepage';\nimport RideDashboard from '../../features/rides/dashboard/RideDashboard';\nimport RideDetails from '../../features/rides/details/RideDetails';\nimport RideForm from '../../features/rides/form/RideForm';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport { useStore } from '../stores/store';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <></>\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/rides' component={RideDashboard} />\n                <PrivateRoute path='/rides/:id' component={RideDetails} />\n                <PrivateRoute key={location.key} path={['/createRide', '/manage/:id']} component={RideForm} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}